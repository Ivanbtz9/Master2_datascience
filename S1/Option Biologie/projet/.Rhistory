M[1,1] =44
sum(M)
Matrix_Proba = function(E){
M = matrix(0, nrow = N, ncol = N)
p=0
for (i in c(1:(N-1))){
for (j in c((i+1):N)){
if(data[i,9]>=data[E,9] | data[j,9]>=data[E,9])
{M[i,j]=0}
else {M[i,j] = Proba_Enf_Parents(i,j,E)}
}}
return(M/sum(M))
}
Matrix_Proba(7)
max(Matrix_Proba(7))
Matrix_Proba = function(E){
M = matrix(0, nrow = N, ncol = N)
p=0
for (i in c(1:(N-1))){
for (j in c((i+1):N)){
if(data[i,9]>=data[E,9] | data[j,9]>=data[E,9])
{M[i,j]=0}
else {M[i,j] = Proba_Enf_Parents(i,j,E)}
}}
return(M/sum(M))
}
max(Matrix_Proba(7))
Matrix_Proba = function(E){
M = matrix(0, nrow = N, ncol = N)
p=0
for (i in c(1:(N-1))){
for (j in c((i+1):N)){
if(data[i,9]>=data[E,9] | data[j,9]>=data[E,9])
{M[i,j]=0}
else {M[i,j] = Proba_Enf_Parents(i,j,E)}
}}
return(M/sum(M))
}
argmax(Matrix_Proba(7))
Matrix_Proba = function(E){
M = matrix(0, nrow = N, ncol = N)
p=0
for (i in c(1:(N-1))){
for (j in c((i+1):N)){
if(data[i,9]>=data[E,9] | data[j,9]>=data[E,9])
{M[i,j]=0}
else {M[i,j] = Proba_Enf_Parents(i,j,E)}
}}
return(M/sum(M))
}
Matrix_Proba(7)
M = Matrix_Proba(7)
M = Matrix_Proba(7)
M = Matrix_Proba(7)
Max = max(M)
M = Matrix_Proba(7)
Max = max(M)
Max
M = Matrix_Proba(7)
Max = max(M)
which.max(M)
M = Matrix_Proba(7)
Max = max(M)
index_applati = which.max(M)
which(M == max(M, na.rm = TRUE), arr.ind = TRUE)
Recup_parent = function(E){
M = Matrix_Proba(E)
indices =  which(M == max(M, na.rm = TRUE), arr.ind = TRUE)
return(E,indices[1],indices[2], -log(max(M)))
}
Recup_parent(7)
Recup_parent = function(E){
M = Matrix_Proba(E)
indices =  which(M == max(M, na.rm = TRUE), arr.ind = TRUE)
l = c(E,indices[1],indices[2], -log(max(M)))
return(l)
}
Recup_parent(7)
Recup_parent = function(E){
M = Matrix_Proba(E)
indices =  which(M == max(M, na.rm = TRUE), arr.ind = TRUE)
l = c(E,indices[1],indices[2], -log(max(M)))
return(l)
}
for (i in c(1:N)){
if (data[i,9]>1){
print(i)
print(Recup_parent(7))
}
}
Recup_parent = function(E){
M = Matrix_Proba(E)
indices =  which(M == max(M, na.rm = TRUE), arr.ind = TRUE)
l = c(E,indices[1],indices[2], -log(max(M)))
return(l)
}
for (i in c(1:N)){
if (data[i,9]>1){
print(i)
print(Recup_parent(7))
}
}
for (i in c(1:N)){
if (data[i,9]>1){
print(i)
print(Recup_parent(i))
}
}
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
if (l[2] != NA ){
L= c(L,l)
}
}
}
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
if (l[2] == NA ){
}
else {L= c(L,l)}
}
}
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
print(l[2])
print(class(l[2]))
if (l[2] == NA ){
}
else {L= c(L,l)}
}
}
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
print(l[2])
print(class(l[2]))
if (l[2] == NaN ){
}
else {L= c(L,l)}
}
}
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
print(l[2])
print(class(l[2]))
if (l[2]){
}
else {L= c(L,l)}
}
}
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
print(l[2])
print(class(l[2]))
if (l[4]){
}
else {L= c(L,l)}
}
}
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
print(l[2])
print(class(l[2]))
if (l[4] == NaN){
}
else {L= c(L,l)}
}
}
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
L= c(L,l)
}
}
L = matrix(L, ncol = 4,byrow = TRUE )
L
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
L= c(L,l)
}
}
L = matrix(L, ncol = 4,byrow = TRUE )
# Supprimer les lignes avec NA ou NaN
Mat = L[complete.cases(L), ]
print(cleaned_mat)
Mat
Mat
install.packages("igraph")
L = c()
for (i in c(1:N)){
if (data[i,9]>1){
l = Recup_parent(i)
L= c(L,l)
}
}
L = matrix(L, ncol = 4,byrow = TRUE )
# Supprimer les lignes avec NA ou NaN
Mat = L[complete.cases(L), ]
Mat
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$label <- c(E(g)$label, edge_label, edge_label)
E(g)$color <- "blue"
E(g)$width <- 0.6
E(g)$arrow.size <- 0.8
E(g)$label.color <- "#006400"
E(g)$label.dist <- 0.4
E(g)$label.font <- 8
}
lenght(Mat[,1])
length(Mat[,1])
Mat[1,1]
Mat[2,1]
Mat[2,1]
Mat[2,1]
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
}
#plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
}
#plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$label <- c(E(g)$label, edge_label, edge_label)
E(g)$color <- "blue"
E(g)$width <- 0.6
E(g)$arrow.size <- 0.8
E(g)$label.color <- "#006400"
E(g)$label.dist <- 0.4
E(g)$label.font <- 8
}
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$label <- c(E(g)$label, edge_label, edge_label)
E(g)$color <- "blue"
}
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
#E(g)$label <- c(E(g)$label, edge_label, edge_label)
E(g)$color <- "blue"
E(g)$width <- 0.6
E(g)$arrow.size <- 0.8
E(g)$label.color <- "#006400"
E(g)$label.dist <- 0.4
E(g)$label.font <- 8
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$color <- "blue"
E(g)$width <- 0.1
E(g)$arrow.size <- 2
E(g)$label.color <- "#006400"
E(g)$label.dist <- 0.4
E(g)$label.font <- 8
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$color <- "blue"
E(g)$width <- 0.1
E(g)$arrow.size <- 0.1
E(g)$label.color <- "#006400"
E(g)$label.dist <- 0.4
E(g)$label.font <- 8
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$color <- "blue"
E(g)$width <- 0.1
E(g)$arrow.size <- 0.1
E(g)$label.color <- "#006400"
E(g)$label.dist <- 0.4
E(g)$label.font <- 1
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$color <- "blue"
E(g)$width <- 0.1
E(g)$arrow.size <- 0.1
E(g)$label.color <- "#006400"
E(g)$label.dist <- 1
E(g)$label.font <- 1
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$color = "blue"
E(g)$width = 0.1
E(g)$arrow.size = 0.1
E(g)$label.dist = 2
E(g)$label.font <- 1
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$color = "blue"
E(g)$width = 0.1
E(g)$arrow.size = 0.1
E(g)$label.dist = 4
E(g)$label.font <- 0.3
}
plot(g, vertex.label=node_names)
library(igraph)
# Créez un graphe non orienté vide
g = graph.empty(directed = TRUE)
# Spécifiez un nom pour chaque nœud
node_names <- c(1:N)
# Ajoutez n noeuds à l'arbre
g = add_vertices(g, N , name=node_names)
for (i in 1:length(Mat[,1])){
E = Mat[i,1]
P1 = Mat[i,2]
P2 = Mat[i,3]
edge_label = round(exp(-Mat[i,4]), 2)
g = add_edges(g, c(P1, E, P2, E))
# Ajoutez des labels et des paramètres d'arête ici si nécessaire
E(g)$color = "blue"
E(g)$width = 0.1
E(g)$arrow.size = 0.1
E(g)$label.dist = 4
E(g)$label.font <- 0.3
}
plot(g)
