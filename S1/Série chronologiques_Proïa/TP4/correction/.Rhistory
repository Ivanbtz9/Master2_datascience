# Test de Ljung-Box
lbpv = Box.test(Res, lag=lblag, type="Ljung-Box")$p.value
cat("Test de Ljung-Box : p-val=", lbpv, sep="")
# Histogramme
hist(Res, breaks=sqrt(n), freq=FALSE, col="skyblue", main="Densité", xlab="", ylab="")
curve(dnorm(x, m=m, sd=s), col="red", lty=2, add=TRUE)
# Test de Shapiro-Wilk
swpv = shapiro.test(Res)$p.value
cat("\nTest de Shapiro : p-val=", swpv, sep="")
# QQ plots
qqnorm(Res, main="Quantiles", xlab="", ylab="")
qqline(Res, distribution=qnorm, lty=2)
# Nuage de points standardisé
plot((Res-m)/s, type="p", main=substitute(bold("Série standardisée")), xlab="", ylab="")
abline(h=c(-1.96, 1.96), lty=2, col="red")
}
checkupRes(Res)
checkupRes(as.numeric(Res))
auto.arima(Res)
ARMA = Arima(Res, order = c(1, 0, 0), include.mean = TRUE)
plot(Res, type="l")
lines(fitted(ARMA), type="l", col="red")
plot(Res, type="l")
lines(fitted(ARMA), type="l", col="red")
checkupRes(as.numeric(Res))
dev.off()
ARMA = Arima(Res, order = c(1, 0, 0), include.mean = TRUE)
plot(Res, type="l")
lines(fitted(ARMA), type="l", col="red")
lines(fitted(ARMA), type="l", col="red")
ARMA = Arima(Res, order = c(1, 0, 0), include.drift = FALSE)
plot(Res, type="l")
lines(fitted(ARMA), type="l", col="red")
summary(ARMA)
fitted(ARMA)
plot(fitted(ARMA), type="l", col="red")
plot(Res, type="l")
line(fitted(ARMA), type="l", col="red")
auto.arima(Res)
auto.arima(Res, d=0)
auto.arima(Log_BTC_subset, d=0)
fitted(ARIMA)
ARIMA = auto.arima(Log_BTC_subset, d=0)
fitted(ARIMA)
plot(ARIMA,type='l',col='blue')
ARIMA = auto.arima(Log_BTC_subset, d=0)
plot(fitted(ARIMA),type='l',col='blue')
plot(fitted(ARIMA),type='l',col='blue')
line(Log_BTC_subset)
plot(fitted(ARIMA),type='l',col='blue')
line(Log_BTC_subset)
plot(fitted(ARIMA),type='l',col='blue')
line(Log_BTC_subset, col ='black')
line(Log_BTC_subset, col='black')
plot(Log_BTC_subset, col='black')
plot(Log_BTC_subset, col='black')
line(fitted(ARIMA),type='l',col='blue')
plot(as.numeric(Log_BTC_subset), col='black')
plot(as.numeric(Log_BTC_subset),type='l' col='black')
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
line(fitted(ARIMA),type='l',col='blue')
line(fitted(ARIMA),type='l',col='blue')
line(fitted(ARIMA),col='blue')
line(fitted(ARIMA))
line(fitted(ARIMA))
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
line(fitted(ARIMA))
plot(fitted(ARIMA))
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
line(fitted(ARIMA),type='l' ,col='blue')
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
lines(fitted(ARIMA),type='l' ,col='blue')
plot(Res, type="l")
lines(fitted(ARMA), type="l", col="red")
lines(fitted(ARMA), type="l", col="red")
plot(as.numeric(Res), type="l")
lines(fitted(ARMA), type="l", col="red")
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
lines(fitted(ARIMA),type='l' ,col='blue')
plot(as.numeric(Res), type="l")
lines(fitted(ARMA) + fitted(model), type="l", col="red")
plot(as.numeric(Res), type="l")
lines(fitted(ARMA) + as.numeric(fitted(model)), type="l", col="red")
plot(as.numeric(Res+ fitted(model)), type="l")
lines(fitted(ARMA) + as.numeric(fitted(model)), type="l", col="red")
plot(as.numeric(Log_BTC_subset), type="l")
lines(fitted(ARMA) + as.numeric(fitted(model)), type="l", col="red")
plot(as.numeric(Log_BTC_subset), type="l")
lines(fitted(ARMA) + as.numeric(fitted(model)), type="l", col="red")
plot(as.numeric(Log_BTC_subset), type="l")
lines(fitted(ARMA) + as.numeric(fitted(model)), type="l", col="blue")
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
lines(fitted(ARIMA),type='l' ,col='blue')
#Vérifier que ce n'est pas un bruit blanc
checkupRes(as.numeric(Res))
# Nuage de points avec décalage de 1 dans le temps
n = length(Res)
plot(Res[1:(n-1)], Res[2:n], type="p", col="blue", main=substitute(bold("t / t-1")), xlab="", ylab="")
dev.off()
#Vérifier que ce n'est pas un bruit blanc
checkupRes(as.numeric(Res))
Res1 = Log_BTC_subset - fitted(ARIMA)
Res1 = as.numeric(Log_BTC_subset) - fitted(ARIMA)
Res1 = as.numeric(Log_BTC_subset) - fitted(ARIMA)
checkupRes(Res1)
Res2 = as.numeric(Log_BTC_subset) - fitted(ARMA) - as.numeric(fitted(model)
checkupRes(Res2)
Res2 = Log_BTC_subset - fitted(ARMA) - fitted(model)
Res2 = as.numeric(Log_BTC_subset) - fitted(ARMA) - fitted(model)
Res2 = as.numeric(Log_BTC_subset) - as.numeric(fitted(ARMA)) - as.numeric(fitted(model))
checkupRes(Res2)
ARIMA = auto.arima(Log_BTC_subset, d=0)
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
lines(fitted(ARIMA),type='l' ,col='red')
#Avec AUTO_ARIMA on trouve Un MA 5
ARIMA = auto.arima(Log_BTC_subset, d=0)
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
lines(fitted(ARIMA),type='-' ,col='red')
#Avec AUTO_ARIMA on trouve Un MA 5
ARIMA = auto.arima(Log_BTC_subset, d=0)
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
lines(fitted(ARIMA),type='c' ,col='red')
dev.off()
#Avec AUTO_ARIMA on trouve Un MA 5
ARIMA = auto.arima(Log_BTC_subset, d=0)
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
lines(fitted(ARIMA),type='c' ,col='red')
#Avec AUTO_ARIMA on trouve Un MA 5
ARIMA = auto.arima(Log_BTC_subset, d=0)
plot(as.numeric(Log_BTC_subset),type='l' ,col='black')
lines(fitted(ARIMA),type='l' ,col='red')
#Avec un AR(1)
ARMA = Arima(Res, order = c(1, 0, 0), include.drift = FALSE)
summary(ARMA)
plot(as.numeric(Log_BTC_subset), type="l")
lines(fitted(ARMA) + as.numeric(fitted(model)), type="l", col="blue")
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red')
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
BS = Mod +1.96*ARMA$sigma2
BI = Mod -1.96*ARMA$sigma2
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red')
lines(BS,col='green')
lines(BS,col='green')
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
BS = Mod +1.96*ARMA$sigma2
BI = Mod -1.96*ARMA$sigma2
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red')
lines(BS,col='green')
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
polygon(c(1:n,n:1), c(BI,BS),col='grey',border = 'red' )
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
polygon(c(1:n,n:1), c(BS,BI),col='grey',border = 'red' )
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
polygon(c(1:n, n:1), c(BI,BS),col='grey',border = 'red' )
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
polygon(c(n:1, 1:n), c(BI,BS),col='grey',border = 'red' )
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
n = length(BS)
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
polygon(c(1:n, n:1), c(BI,BS),col='grey',border = 'red' )
library(forecast)
# Ajuster un modèle ARIMA sans dérive
model_Arima = Arima(Log_BTC_subset, order=c(1,0,0), include.drift=TRUE)
#utilisation de include.drift dans la commande Arima pour la tendance linéaire
# Obtenir les résidus du modèle ARIMA
arima_no_tendance <- residuals(model_arima)
# Tracer la série sans tendance
plot(arima_no_tendance, main="Série temporelle sans tendance (Arima avec dérive)")
adf.test(arima_no_tendance)
kpss.test(arima_no_tendance)
summary(model_Arima)
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
n = length(BS)
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
polygon(c(1:n, n:1), c(BI,BS),col='grey',border = 'red' )
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
n = length(BS)
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='green',lty = 2)
polygon(c(1:n, n:1), c(BI,BS),col='grey' )
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(1:n, n:1), c(BI,BS),col='grey',border = 'red' )
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
n = length(BS)
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(n:1, n:1), c(BI,BS),col='grey',border = 'red' )
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
n = length(BS)
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(n:1, 1:n), c(BI,BS),col='grey',border = 'red' )
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
n = length(BS)
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(1:n, n:1), c(BI,BS),col='grey',border = 'red' )
Mod = as.numeric(fitted(ARMA)) + as.numeric(fitted(model))
n = length(BS)
BS = Mod +1.96*sqrt(ARMA$sigma2)
BI = Mod -1.96*sqrt(ARMA$sigma2)
plot(as.numeric(Log_BTC_subset), type="l")
lines(BI,col='red',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(1:n, n:1), c(BI,rev(BS)),col='grey',border = 'red' )
plot(BI,col='red',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(1:n, n:1), c(BI,rev(BS)),col='grey',border = 'red' )
plot(as.numeric(Log_BTC_subset), type="l")
plot(BI,col='red',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(1:n, n:1), c(BI,rev(BS)),col='grey',border = 'red' )
lines(as.numeric(Log_BTC_subset), type="l")
plot(BI,col='red',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(1:n, n:1), c(BI,rev(BS)),col='grey',border = 'red' )
plot(BI,col='red',type='l',lty=2)
lines(BS,col='red',lty = 2)
plot(BI,col='red',type='l',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(1:n, n:1), c(BI,rev(BS)),col='grey',border = 'red' )
#lines(as.numeric(Log_BTC_subset), type="l")
plot(BI,col='red',type='l',lty=2)
lines(BS,col='red',lty = 2)
polygon(c(1:n, n:1), c(BI,rev(BS)),col='grey',border = 'red' )
lines(as.numeric(Log_BTC_subset), type="l")
plot(BS,col='red',type='l',lty = 2)
lines(BI,col='red',type='l',lty=2)
polygon(c(1:n, n:1), c(BI,rev(BS)),col='grey',border = 'red' )
lines(as.numeric(Log_BTC_subset), type="l")
lines(exp(as.numeric(Log_BTC_subset)), type="l")
plot(exp(as.numeric(Log_BTC_subset)), type="l")
plot(exp(as.numeric(Log_BTC_subset)), type="l")
lines(exp(BS),col='red',type='l',lty = 2)
lines(exp(BI),col='red',type='l',lty=2)
library(tseries)
Rain = scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat", skip=1)
Rain
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
Read 42 items
kings = scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=3)
plot(exp(as.numeric(Log_BTC_subset)), type="l")
lines(exp(BS),col='red',type='l',lty = 2)
lines(exp(BI),col='red',type='l',lty=2)
grid()
plot(exp(as.numeric(Log_BTC_subset)), type="l")
lines(exp(BS),col='red',type='l',lty = 2)
lines(exp(BI),col='red',type='l',lty=2)
grid()
title('BTC encadré par un model mutiplicatif régression linéaire et AR(1)')
plot(exp(as.numeric(Log_BTC_subset)), type="l")
lines(exp(BS),col='red',type='l',lty = 2)
lines(exp(BI),col='red',type='l',lty=2)
grid()
title('BTC encadré par un modèle mutiplicatif: régression linéaire et AR(1)')
Rain = scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat", skip=1)
Rain = c(23.56, 26.07, 21.86, 31.24, 23.65, 23.88,
26.41, 22.67, 31.69, 23.86, 24.11, 32.43,
23.26, 22.57, 23.00, 27.88, 25.32, 25.08,
27.76, 19.82, 24.78, 20.12, 24.34, 27.42,
19.44, 21.63, 27.49, 19.43, 31.13, 23.09,
25.85, 22.65, 22.75, 26.36, 17.70, 29.81,
22.93, 19.22, 20.63, 35.34, 25.89, 18.65,
23.06, 22.21, 22.18, 18.77, 28.21, 32.24,
22.27, 27.57, 21.59, 16.93, 29.48, 31.60,
26.25, 23.40, 25.42, 21.32, 25.02, 33.86,
22.67, 18.82, 28.44, 26.16, 28.17, 34.08,
33.82, 30.28, 27.92, 27.14, 24.40, 20.35,
26.64, 27.01, 19.21, 27.74, 23.85, 21.23,
28.15, 22.61, 19.80, 27.94, 21.47, 23.52,
22.86, 17.69, 22.54, 23.28, 22.17, 20.84,
38.10, 20.65, 22.97, 24.26, 23.01, 23.67,
26.75, 25.36, 24.79, 27.88)
plot(Rain,col='black',type='l')
decompose(Rain)
adf.test(Rain)
kpss.test(Rain)
library(TSA)
# Donn?es réelles de conso électrique
data(electricity)
plot(electricity)
Y = log(electricity)
plot(Y)
# D?composition additive sur le log puis mod?lisation ARMA sur la fluctuation
Decomp = decompose(Y)
plot(Decomp)
Res = Decomp$random
checkupRes = function(Res){
layout(matrix(c(1,1,1,2:7), nrow=3, ncol=3, byrow=TRUE))
#plot1
Res = Res[!is.na(Res)] #différent des Nan
plot(Res,type = 'l',xlab='',ylab='',main = "Évolution de la série")
#plot2
ACF = acf(Res, lag.max = 20,plot = FALSE)
plot(ACF,xlab='',ylab='',ylim=c(-1,1),main = "ACF")
#plot3
PACF = pacf(Res, lag.max = 50,plot = FALSE)
plot(PACF,xlab='',ylab='',ylim=c(-1,1),main = "PACF")
#plot4
n = length(Res)
plot(Res[1:(n-1)],Res[2:n],type='p',col='violet',main = 'Relation entre les résidus') # voir une structure ou non
#plot5
hist(Res, main= 'Histogramme des résidus', freq=FALSE)
curve(dnorm(x, mean=mean(Res), sd=sd(Res)),type = 'l',col='red', add=TRUE)
#rajouter la densité Gaussienne sur l'histogramme
#plot6
qqnorm(Res)
qqline(Res)
#plot7
z_scores = (Res - mean(Res)) / sd(Res)
plot(z_scores, type = 'p', col = 'blue', main = 'Nuage de points de la série renormalisée')
abline(h = c(-1.96, 1.96), col = 'red', lty = 2)
}
checkupRes(Rain)
# Fonction permettant une analyse visuelle des résidus d'une modélisation par quelques graphiques adaptés
checkupRes = function(Res,lagmax=40, lblag=5){
# Partitionnement de la fenêtre graphique
layout(matrix(c(1,1,1,2:7), nrow=3, ncol=3, byrow=TRUE))
par(oma=c(0, 0, 0, 0))
#par(mgp=c(0, 0, 0))
par(mar=c(2.5, 2, 1.5, 2))
m = mean(Res)
s = sd(Res)
# Série des résidus
plot(Res, type="l", col="black", main="Série", xlab="", ylab="", cex=0.6)
# ACF/PACF
ACF = acf(Res, lag.max=lagmax, plot=FALSE)
plot(ACF, ylim=c(-1, 1), xlab="", ylab="")
title("ACF")
PACF = pacf(Res, lag.max=lagmax, plot=FALSE)
plot(PACF, ylim=c(-1, 1), xlab="", ylab="")
title("PACF")
# Nuage de points avec décalage de 1 dans le temps
n = length(Res)
plot(Res[1:(n-1)], Res[2:n], type="p", col="blue", main=substitute(bold("t / t-1")), xlab="", ylab="")
# Test de Ljung-Box
lbpv = Box.test(Res, lag=lblag, type="Ljung-Box")$p.value
cat("Test de Ljung-Box : p-val=", lbpv, sep="")
# Histogramme
hist(Res, breaks=sqrt(n), freq=FALSE, col="skyblue", main="Densité", xlab="", ylab="")
curve(dnorm(x, m=m, sd=s), col="red", lty=2, add=TRUE)
# Test de Shapiro-Wilk
swpv = shapiro.test(Res)$p.value
cat("\nTest de Shapiro : p-val=", swpv, sep="")
# QQ plots
qqnorm(Res, main="Quantiles", xlab="", ylab="")
qqline(Res, distribution=qnorm, lty=2)
# Nuage de points standardisé
plot((Res-m)/s, type="p", main=substitute(bold("Série standardisée")), xlab="", ylab="")
abline(h=c(-1.96, 1.96), lty=2, col="red")
}
checkupRes(Rain)
library(forecast)
L_Rain = log(Rain)
Rain = scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat", skip=1)
checkupRes(L_Rain)
auto.arima(L_Rain)
model_auto_arima = auto.arima(L_Rain)
summary(model_auto_arima)
Volcano = scan("http://robjhyndman.com/tsdldata/annual/dvi.dat", skip=1)
Volcano = c(200,150,100,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,100,500,350,200,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,150,100,50,0,0,0,200,150,100,50,40,30,20,10,400,300,210,110,10,20,50,50,50,40,30,20,10,200,150,100,50,0,0,0,0,0,0,0,100,75,50,25,0,0,120,90,60,30,0,40,30,120,85,150,400,275,175,75,0,60,45,30,15,100,75,50,25,0,0,0,0,0,0,340,255,170,85,130,100,65,30,0,0,0,0,200,150,100,50,0,0,0,0,280,210,140,70,0,0,0,0,0,0,0,0,0,140,285,205,105,45,0,0,0,0,0,0,0,300,225,150,75,0,80,60,40,20,0,120,90,60,30,100,75,50,55,15,15,15,15,15,160,130,90,50,0,0,0,0,0,0,0,0,0,0,60,45,30,15,0,0,0,0,200,150,160,255,150,95,40,80,110,77,45,13,0,0,0,0,0,0,0,0,50,37,25,13,0,0,0,180,135,90,45,400,300,200,160,45,30,15,0,0,0,0,0,120,130,90,50,130,90,60,30,0,0,0,0,0,0,0,0,80,180,170,170,695,490,375,195,30,15,0,200,150,100,70,80,65,50,75,50,200,130,80,40,525,450,375,300,225,150,75,0,0,0,100,205,140,90,30,0,0,0,0,0,0,140,105,70,35,0,160,120,80,40,0,0,0,160,120,80,40,0,0,0,120,90,60,30,0,0,0,0,400,300,240,170,50,170,125,85,45,20,15,10,5,0,0,30,25,15,5,180,135,90,45,0,60,45,30,15,0,60,45,30,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,120,80,40,0,0,0
)
plot(Volcano)
Volcano = log(c(200,150,100,50,0,0,0,0,0,0
,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,50,50,50,0,0,
0,0,0,0,0,0,0,0,0,0,0,100,500,350,
200,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0
,0,0,0,0,0,0,200,150,100,50,0,0,0,200
,150,100,50,40,30,20,10,400,300,
210,110,10,20,50,50,50,40,30,20,10,
200,150,100,50,0,0,0,0,0,0,0,100,
75,50,25,0,0,120,90,60,30,0,40,30,
120,85,150,400,275,175,75,0,60,45,30,
15,100,75,50,25,0,0,0,0,0,0,340,255,170,
85,130,100,65,30,0,0,0,0,200,150,100,50,0,
0,0,0,280,210,140,70,0,0,0,0,0,0,0,0,0,140,
285,205,105,45,0,0,0,0,0,0,0,300,225,150,75,
0,80,60,40,20,0,120,90,60,30,100,75,50,55,
15,15,15,15,15,160,130,90,50,0,0,0,0,0,0,0,
0,0,0,60,45,30,15,0,0,0,0,200,150,160,255,150,
95,40,80,110,77,45,13,0,0,0,0,0,0,0,0,50,37,25,13,
0,0,0,180,135,90,45,400,300,200,160,45,30,15,0,0,0,
0,0,120,130,90,50,130,90,60,30,0,0,0,0,0,0,0,0,80,180,
170,170,695,490,375,195,30,15,0,200,150,100,70,80,65,
50,75,50,200,130,80,40,525,450,375,300,225,150,75,0,0,0,
100,205,140,90,30,0,0,0,0,0,0,140,105,70,35,0,160,120,80,
40,0,0,0,160,120,80,40,0,0,0,120,90,60,30,0,0,0,0,400,300,
240,170,50,170,125,85,45,20,15,10,5,0,0,30,25,15,5,180,135,
90,45,0,60,45,30,15,0,60,45,30,15,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,120,80,40,0,0,0)
Volcano = c(200,150,100,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,100,500,350,200,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,150,100,50,0,0,0,200,150,100,50,40,30,20,10,400,300,210,110,10,20,50,50,50,40,30,20,10,200,150,100,50,0,0,0,0,0,0,0,100,75,50,25,0,0,120,90,60,30,0,40,30,120,85,150,400,275,175,75,0,60,45,30,15,100,75,50,25,0,0,0,0,0,0,340,255,170,85,130,100,65,30,0,0,0,0,200,150,100,50,0,0,0,0,280,210,140,70,0,0,0,0,0,0,0,0,0,140,285,205,105,45,0,0,0,0,0,0,0,300,225,150,75,0,80,60,40,20,0,120,90,60,30,100,75,50,55,15,15,15,15,15,160,130,90,50,0,0,0,0,0,0,0,0,0,0,60,45,30,15,0,0,0,0,200,150,160,255,150,95,40,80,110,77,45,13,0,0,0,0,0,0,0,0,50,37,25,13,0,0,0,180,135,90,45,400,300,200,160,45,30,15,0,0,0,0,0,120,130,90,50,130,90,60,30,0,0,0,0,0,0,0,0,80,180,170,170,695,490,375,195,30,15,0,200,150,100,70,80,65,50,75,50,200,130,80,40,525,450,375,300,225,150,75,0,0,0,100,205,140,90,30,0,0,0,0,0,0,140,105,70,35,0,160,120,80,40,0,0,0,160,120,80,40,0,0,0,120,90,60,30,0,0,0,0,400,300,240,170,50,170,125,85,45,20,15,10,5,0,0,30,25,15,5,180,135,90,45,0,60,45,30,15,0,60,45,30,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,120,80,40,0,0,0
Volcano = c(200,150,100,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,100,500,350,200,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,150,100,50,0,0,0,200,150,100,50,40,30,20,10,400,300,210,110,10,20,50,50,50,40,30,20,10,200,150,100,50,0,0,0,0,0,0,0,100,75,50,25,0,0,120,90,60,30,0,40,30,120,85,150,400,275,175,75,0,60,45,30,15,100,75,50,25,0,0,0,0,0,0,340,255,170,85,130,100,65,30,0,0,0,0,200,150,100,50,0,0,0,0,280,210,140,70,0,0,0,0,0,0,0,0,0,140,285,205,105,45,0,0,0,0,0,0,0,300,225,150,75,0,80,60,40,20,0,120,90,60,30,100,75,50,55,15,15,15,15,15,160,130,90,50,0,0,0,0,0,0,0,0,0,0,60,45,30,15,0,0,0,0,200,150,160,255,150,95,40,80,110,77,45,13,0,0,0,0,0,0,0,0,50,37,25,13,0,0,0,180,135,90,45,400,300,200,160,45,30,15,0,0,0,0,0,120,130,90,50,130,90,60,30,0,0,0,0,0,0,0,0,80,180,170,170,695,490,375,195,30,15,0,200,150,100,70,80,65,50,75,50,200,130,80,40,525,450,375,300,225,150,75,0,0,0,100,205,140,90,30,0,0,0,0,0,0,140,105,70,35,0,160,120,80,40,0,0,0,160,120,80,40,0,0,0,120,90,60,30,0,0,0,0,400,300,240,170,50,170,125,85,45,20,15,10,5,0,0,30,25,15,5,180,135,90,45,0,60,45,30,15,0,60,45,30,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,120,80,40,0,0,0
)
plot(Volcano)
dev.off()
plot(Volcano)
LV = log(Volcano+1)
plot(LV)
adf.test(LV)
kpss.test(LV)
checkupRes(LV)
#Avec un AR(1)
ARMA = Arima(Res, order = c(2, 0, 0), include.drift = True)
#Avec un AR(1)
ARMA = Arima(Res, order = c(2, 0, 0), include.drift = TRUE)
summary(ARMA)
#Avec un AR(2)
ARMA = Arima(Res, order = c(2, 0, 0), include.drift = TRUE)
summary(ARMA)
#Avec un AR(2)
ARMA = Arima(Res, order = c(2, 0, 0), include.drift = FALSE)
summary(ARMA)
#Avec un AR(4)
ARMA = Arima(Res, order = c(4, 0, 0), include.drift = FALSE)
summary(ARMA)
#Avec un AR(4)
ARMA = Arima(Res, order = c(4, 0, 0), include.drift = FALSE)
summary(ARMA)
plot(LV, type="l")
lines(fitted(ARMA) , type="l", col="blue")
fitted(ARMA)
plot(LV, type="l")
lines(as.numeric(fitted(ARMA)) , type="l", col="blue")
dev.off()
plot(LV, type="l")
lines(as.numeric(fitted(ARMA)) , type="l", col="blue")
#Avec un AR(4)
ARMA = Arima(LV, order = c(4, 0, 0), include.drift = FALSE)
summary(ARMA)
plot(LV, type="l")
lines(as.numeric(fitted(ARMA)) , type="l", col="blue")
?auto.arima
# AUTO arima
auto.arima(LV,d=0)
# AUTO arima
model_AA= auto.arima(LV,d=0)
plot(LV, type="l")
lines(as.numeric(fitted(model_AA)) , type="l", col="blue")
model_AA= auto.arima(LV,d=0)
plot(LV, type="l")
lines(as.numeric(fitted(model_AA)) , type="l", col="red")
Res1 = LV - as.numeric(fitted(ARMA))
checkupRes(Res1)
# AUTO arima
model_AA= auto.arima(LV,d=0)
plot(LV, type="l")
lines(as.numeric(fitted(model_AA)) , type="l", col="red")
Res2 = LV - as.numeric(fitted(model_AA))
checkupRes(Res2)
#Avec un AR(4)
ARMA = Arima(LV, order = c(4, 0, 0), include.drift = FALSE)
summary(ARMA)
plot(LV, type="l")
lines(as.numeric(fitted(ARMA)) , type="l", col="blue")
Res1 = LV - as.numeric(fitted(ARMA))
checkupRes(Res1)
plot(LV, type="l")
lines(as.numeric(fitted(ARMA)) , type="l", col="blue")
