q = length(Theta)
ind = max(length(Phi)+1,length(Theta)+1)
for (i in ind:n){
AR = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
MA = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)] ,0)
X[i] = AR + MA + E[i]
}
return(Y + m)
}
X = simulerARMA(n,m,Phi,Theta,s2)
simulerARMA = function(n,m,Phi,Theta,s2) {
E = rnorm(n,mean = 0, sd= sqrt(s2))
Y = E
p = length(Phi)
q = length(Theta)
ind = max(length(Phi)+1,length(Theta)+1)
for (i in ind:n){
AR = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
MA = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)] ,0)
Y[i] = AR + MA + E[i]
}
return(Y + m)
}
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=200
m=3
s2 =1
simulerARMA = function(n,m,Phi,Theta,s2) {
E = rnorm(n,mean = 0, sd= sqrt(s2))
Y = E
p = length(Phi)
q = length(Theta)
ind = max(length(Phi)+1,length(Theta)+1)
for (i in ind:n){
AR = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
MA = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)] ,0)
Y[i] = AR + MA + E[i]
}
return(Y + m)
}
X = simulerARMA(n,m,Phi,Theta,s2)
plot(X,type='l',col='red')
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(n,m,Phi,Theta,s2)
plot(X,type='l',col='red')
X = simulerARMA(500, 5, c(0.8), c(), 1)
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.8), c(), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5, 1, 0.7), c(), 1)
plot(X,type='l',col='red')
X = simulerARMA(500, 5, c(0.5), c(), 1)
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5), c(), 1)
plot(X,type='l',col='red')
X = simulerARMA(500, 5, c(0.5), c(0.4), 1)
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5), c(0.4), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = E# rep(0,n)
#Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5), c(0.4), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = E# rep(0,n)
#Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,4), c(0.4), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = E# rep(0,n)
#Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.3), c(0.4), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = E# rep(0,n)
#Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.3), c(0.4,0.2), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p+1,q+1)
Y = E
for (i in (r:n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.3), c(0.4,0.2), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p+1,q+1)
Y = E
for (i in (r:n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.7), c(0.4,0.2), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p+1,q+1)
Y = E
for (i in (r:n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.1), c(0.4,0.2), 1)
plot(X,type='l',col='red')
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p+1,q+1)
Y = E
for (i in (r:n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.1), c(0.4,0.2), 1)
plot(X,type='l',col='red',, main = "Simulation d'un processus ARMA(2,2))
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p+1,q+1)
Y = E
for (i in (r:n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.1), c(0.4,0.2), 1)
plot(X,type='l',col='red',, main = "Simulation d'un processus ARMA(2,2)")
set.seed(0)
Phi = c(0.5, 1, 0.7)
Theta = c(0.6, 0.4, 0.3)
n=100
m=3
s2 =1
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p+1,q+1)
Y = E
for (i in (r:n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(X = Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.1), c(0.4,0.2), 1)
plot(X,type='l',col='red', main = "Simulation d'un processus ARMA(2,2)")
X = simulerARMA(500, 5, c(0.5,0.1), c(0.4,0.2), 1)
X2 = simulerARMA(500, 5, c(0.5,0.3), c(0.2), 1)
plot(X,type='l',col='red', main = "Simulation d'un processus ARMA(2,2)")
lines(X2)
plot(X,type='l',col='red', main = "Simulation d'un processus ARMA(2,2)")
lines(X2,type='l',col='blue')
plot(X,type='l',col='red', main = "Simulation d'un processus ARMA(2,2) VS ARMA(2,1)")
lines(X2,type='l',col='blue')
library(tseries)
library(tseries)
library(help="tseries")
?arima.sim
library(tseries)
require(graphics)
x = arima.sim(n = 500, list(ar =c(0.5,0.1), ma = c(0.4,0.2)),sd = sqrt(1))
x1 = simulerARMA(500, 5, c(0.5,0.1), c(0.4,0.2), 1)
plot(x,type='l',col='blue')
lines(x1,type='l',col='black')
x = arima.sim(n = 500, list(ar =c(0.5,0.1), ma = c(0.4,0.2)),sd = sqrt(1))
x1 = simulerARMA(500, 0, c(0.5,0.1), c(0.4,0.2), 1)
plot(x,type='l',col='blue')
lines(x1,type='l',col='black')
set.seed(0)
x = arima.sim(n = 500, list(ar =c(0.5,0.1), ma = c(0.4,0.2)),sd = sqrt(1))
x1 = simulerARMA(500, 0, c(0.5,0.1), c(0.4,0.2), 1)
plot(x,type='l',col='blue')
lines(x1,type='l',col='black')
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
p = length(Phi)
q= length(Theta)
r = max(p+1,q+1)
Y = E
for (i in (r:n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
}
return(Y+m)
}
X = simulerARMA(500, 5, c(0.5,0.1), c(0.4,0.2), 1)
X2 = simulerARMA(500, 5, c(0.5,0.3), c(0.2), 1)
plot(X,type='l',col='red', main = "Simulation d'un processus ARMA(2,2) VS ARMA(2,1)")
lines(X2,type='l',col='blue')
library(tseries)
require(graphics)
set.seed(0)
x = arima.sim(n = 500, list(ar =c(0.5,0.1), ma = c(0.4,0.2)),sd = sqrt(1))
x1 = simulerARMA(500, 0, c(0.5,0.1), c(0.4,0.2), 1)
plot(x,type='l',col='blue')
lines(x1,type='l',col='black')
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n, 0, sqrt(s2))
p = length(Phi)
q = length(Theta)
r = max(p, q + 1)
Y = numeric(n)
for (i in 1:r){
Y[i] = E[i]
}
for (i in (r + 1):n){
ar = sum(Phi * Y[(i - 1):(i - p)])  # Calcul du terme AR
ma = sum(Theta * E[(i - 1):(i - q)])  # Calcul du terme MA
Y[i] = m + ar + ma + E[i]
}
return(Y)
}
set.seed(0)
x = arima.sim(n = 500, list(ar =c(0.5,0.1), ma = c(0.4,0.2)), sd = sqrt(1))
x1 = simulerARMA(500, 0, c(0.5,0.1), c(0.4,0.2), 1)
plot(x, type = 'l', col = 'blue', ylim = c(min(x, x1), max(x, x1)))
lines(x1, type = 'l', col = 'black')
numeric(n)
numeric(4)
rep(0,5)
set.seed(114)
n = 200
phi = c(0.5, 0.2)
theta = 0.3
sigma = 1
simulated_data = arima.sim(n = n, list(ar = phi, ma = theta), sd = sigma)
plot(simulated_data)
plot(x,type='l',col='blue')
lines(x1,type='l',col='black')
# Charger la bibliothèque
library(forecast)
install.packages("forecast")
# Charger la bibliothèque
library(forecast)
# Calculer et afficher l'ACF
acf(simulated_data, lag.max = 20, main = "ACF de la série simulée")
# Calculer et afficher la PACF
pacf(simulated_data, lag.max = 20, main = "PACF de la série simulée")
# Calculer et afficher l'ACF
acf(simulated_data, lag.max = 20, main = "ACF de la série simulée")
set.seed(114)
n = 200
phi = 0
theta = c(0.5, 0.2)
sigma = 1
simulated_data = arima.sim(n = n, list(ar = phi, ma = theta), sd = sigma)
set.seed(114)
n = 200
phi = c(0)
theta = c(0.5, 0.2)
sigma = 1
simulated_data = arima.sim(n = n, list(ar = phi, ma = theta), sd = sigma)
set.seed(114)
n = 200
phi = c(0.2)
theta = c(0.5, 0.2)
sigma = 1
simulated_data = arima.sim(n = n, list(ar = phi, ma = theta), sd = sigma)
simulated_data = arima.sim(n = n, list( ma = theta), sd = sigma)
set.seed(114)
n = 200
phi = c(0.2)
theta = c(0.5, 0.2)
sigma = 1
simulated_data = arima.sim(n = n, list( ma = theta), sd = sigma)
# Calculer et afficher l'ACF
acf(simulated_data, lag.max = 20, main = "ACF de la série simulée")
set.seed(114)
n = 200
phi = c(0.2)
theta = c(0.5, 0.2,0.4)
sigma = 1
simulated_data = arima.sim(n = n, list( ma = theta), sd = sigma)
# Installer la bibliothèque "forecast" si ce n'est pas déjà fait
# install.packages("forecast")
# Charger la bibliothèque
library(forecast)
# Calculer et afficher l'ACF
acf(simulated_data, lag.max = 20, main = "ACF de la série simulée")
# Calculer et afficher la PACF
pacf(simulated_data, lag.max = 20, main = "PACF de la série simulée")
simulated_data = arima.sim(n = n, list( ar = phi,ma = theta), sd = sigma)
# Installer la bibliothèque "forecast" si ce n'est pas déjà fait
# install.packages("forecast")
# Charger la bibliothèque
library(forecast)
# Calculer et afficher l'ACF
acf(simulated_data, lag.max = 20, main = "ACF de la série simulée")
