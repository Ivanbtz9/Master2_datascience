library(datasets)
library(tseries)
# dataset et stat sont directement chargé à l'entrée
Data = AirPassengers #class(Data) --> "ts"
# Créer un graphique (plot) de la série temporelle
plot(AirPassengers, main = "Nombre de passagers aériens mensuels", xlab = "Année", ylab = "Nombre de passagers")
grid()
# avec la règle des parallèles on voit que le modèle est multiplicatif car elles s'écartent
LData = log(Data)
plot(LData, main = "Nombre de passagers aériens mensuels", xlab = "Année", ylab = "Nombre de passagers")
grid()
Decomp = decompose(LData, type = c("additive"), filter = NULL) #> help(decompose)
# Diviser la zone graphique en trois colonnes
par(mfrow = c(1, 3))
plot(Decomp$trend) #tendance
plot(Decomp$seasonal) #périodicité
plot(Decomp$random) #bruit
plot(Decomp$figure,type ='l')
plot(Decomp) # plot de toutes les infod
#### Trouver la tendance linéaire
n = length(Decomp$trend)
Time = 1:n
ntps = (n+1):(n+24)
m_linear = lm( Decomp$trend ~ Time )
summary(m_linear)
a0 = m_linear$coefficients[1]
a1 = m_linear$coefficients[2]
plot(Time,Decomp$trend, type = 'l', ylab = 'ytrend')
lines(Time,a0+ a1*Time, type = 'l', lty=2, ylab = 'nb_passenger',col = 'red')
ntps = (n+1):(n+24)
PredT = a0+ a1*ntps
PredS = Decomp$figure
Pred = PredT + PredS
plot(Time,LData, type = 'l', ylab = 'Log passenger')
plot(ts(c(LData,Pred), frequency = 12,start = 1949),ylab = 'Log passenger')
lines(ts(Pred, frequency = 12,start = 1961),col = 'red')
grid()
plot(ts(exp(c(LData,Pred)), frequency = 12,start = 1949),ylab = 'passenger')
lines(ts(exp(Pred), frequency = 12,start = 1961),col = 'red')
grid()
Data = AirPassengers #class(Data) --> "ts"
# Créer un graphique (plot) de la série temporelle
plot(AirPassengers, main = "Nombre de passagers aériens mensuels", xlab = "Année", ylab = "Nombre de passagers")
grid()
typeof(Data)
type(Data)
LData = log(Data)
plot(LData, main = "Nombre de passagers aériens mensuels", xlab = "Année", ylab = "Nombre de passagers")
grid()
# Diviser la zone graphique en trois colonnes
par(mfrow = c(1, 3))
plot(Decomp$trend) #tendance
plot(Decomp$seasonal) #périodicité
plot(Decomp$random) #bruit
plot(Decomp$figure,type ='l')
n = length(Decomp$trend)
Time = 1:n
ntps = (n+1):(n+24)
m_linear = lm( Decomp$trend ~ Time )
summary(m_linear)
plot(Time,Decomp$trend, type = 'l', ylab = 'ytrend')
lines(Time,a0+ a1*Time, type = 'l', lty=2, ylab = 'nb_passenger',col = 'red')
LData
plot(ts(exp(c(LData,Pred)), frequency = 12,start = 1949),ylab = 'passenger')
lines(ts(exp(Pred), frequency = 12,start = 1961),col = 'red')
grid()
plot(ts(c(LData,Pred), frequency = 12,start = 1949),ylab = 'Log passenger')
lines(ts(Pred, frequency = 12,start = 1961),col = 'red')
grid()
library(datasets)
library(tseries)
c(0)*n
rep(c(0),n)
rep(c(0),4)
x = rep(c(0),n)
addition <- function(a, b) {
resultat <- a + b
return(resultat)
}
addition(4,4)
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
x = rep(c(0),n)
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for i in ((r+1):n){
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
x = rep(c(0),n)
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
return(Y)
}
}
p <- 4
Phi <- rnorm(p) #vecteur de taille p
q <- 4
Theta <- rnorm(q) #vecteur de taille q
s2 = 2
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
x = rep(c(0),n)
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
return(Y)
}
}
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
x = rep(c(0),n)
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
return(Y+m)
}
}
p <- 4
Phi <- rnorm(p) #vecteur de taille p
q <- 4
Theta <- rnorm(q) #vecteur de taille q
s2 = 2
n=100
m=2
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
x = rep(c(0),n)
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
return(Y+m)
}
}
x = simulerARMA(n, m, Phi, Theta, s2)
plot(x)
x = simulerARMA(100, 5, c(0.2,-0.3), c(0.5), 2)
plot(x)
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
x = rep(c(0),n)
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
X = Y+m
plot(X,type='l',col='red')
}
}
simulerARMA(100, 5, c(0.2,-0.3), c(0.5), 2)
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
x = rep(c(0),n)
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
X = Y+m
plot(X,type='l',col='red')
}
}
simulerARMA(100, 5, c(0.2,-0.3), c(0.5), 2)
simulerARMA(100, 5, c(0.2,-0.3), c(0.3), 2)
simulerARMA <- function(n, m, Phi, Theta, s2){
E = rnorm(n,0,sqrt(s2))
x = rep(c(0),n)
p = length(Phi)
q= length(Theta)
r = max(p,q)
Y = rep(0,n)
Y[1:r]=E[1:r]
for (i in ((r+1):n)){
ar = ifelse(p>0,t(Phi) %*% Y[(i-p):(i-1)],0)
ma = ifelse(q>0,t(Theta) %*% E[(i-q):(i-1)],0)
Y[i]= ma + ar + E[i]
X = Y+m
plot(X,type='l',col='red')
}
}
simulerARMA(100, 5, c(0.2,-0.3), c(0.3), 2)
simulerARMA(500, 5, c(0.2), c(), 1)
simulerARMA(500, 5, c(0.2), c(), 1)
simulerARMA(500, 5, c(0.8), c(), 1)
simulerARMA(500, 5, c(0.8), c(), 1)
simulerARMA(500, 5, c(-0.8), c(), 1)
simulerARMA()
simulerARMA(500, 5, c(-0.8), c(), 1)
